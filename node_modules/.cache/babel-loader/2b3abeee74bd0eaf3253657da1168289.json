{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { WithAuthRedirect } from \"./hoc/WithAuthRedirect\";\n\nconst Dialogs = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: props.isAuth ? \"exit\" : \"login\"\n  }, void 0, false);\n};\n\n_c = Dialogs;\nexport let DialogsRedirectComponent = WithAuthRedirect(Dialogs);\n_c2 = DialogsRedirectComponent;\n\nlet mapStateToProps = state => {\n  return {};\n};\n\nconst DialogsContainer = connect(mapStateToProps)(DialogsRedirectComponent); // (props) =>{\n//   if(!props.isAuth) return <Redirect to={\"/login\"} />\n//   return <Dialogs {...props}/>\n// }\n\nexport default DialogsContainer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Dialogs\");\n$RefreshReg$(_c2, \"DialogsRedirectComponent\");","map":{"version":3,"sources":["/home/bravedevuser/projects/react-test/social-redux/react-redux/src/Dialogs.js"],"names":["connect","Redirect","WithAuthRedirect","Dialogs","props","isAuth","DialogsRedirectComponent","mapStateToProps","state","DialogsContainer"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,gBAAT,QAAiC,wBAAjC;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAEzB,sBACE;AAAA,cACGA,KAAK,CAACC,MAAN,GAAc,MAAd,GAAqB;AADxB,mBADF;AAKD,CAPD;;KAAMF,O;AASN,OAAO,IAAIG,wBAAwB,GAAGJ,gBAAgB,CAACC,OAAD,CAA/C;MAAIG,wB;;AAEX,IAAIC,eAAe,GAAIC,KAAD,IAAU;AAC9B,SAAO,EAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAET,OAAO,CAACO,eAAD,CAAP,CAA0BD,wBAA1B,CAAxB,C,CAEA;AACA;AACA;AACA;;AAEA,eAAeG,gBAAf","sourcesContent":["import { connect } from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { WithAuthRedirect } from \"./hoc/WithAuthRedirect\"\r\n\r\nconst Dialogs = (props) => {\r\n\r\n  return (\r\n    <>\r\n      {props.isAuth? \"exit\":\"login\"}\r\n    </>\r\n  )\r\n}\r\n\r\nexport let DialogsRedirectComponent = WithAuthRedirect(Dialogs)\r\n\r\nlet mapStateToProps = (state) =>{\r\n  return {\r\n\r\n  }\r\n}\r\n\r\nconst DialogsContainer =connect(mapStateToProps) (DialogsRedirectComponent)\r\n\r\n// (props) =>{\r\n//   if(!props.isAuth) return <Redirect to={\"/login\"} />\r\n//   return <Dialogs {...props}/>\r\n// }\r\n\r\nexport default DialogsContainer"]},"metadata":{},"sourceType":"module"}